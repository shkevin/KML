---
name: CI

on:
  push:
  pull_request:
  release:

concurrency:
  group: ${{github.workflow}}-${{github.event.pull_request.number || github.sha}}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1

jobs:
  build:
    runs-on: ${{matrix.config.os}}
    strategy:
      fail-fast: true
      matrix:
        config:
          # - {
          #   name: "Windows Latest MSVC",
          #   os: windows-latest,
          #   artifact: "windows_gcc.7z",
          #   build_type: "Release",
          #   cc: "gcc",
          #   cxx: "g++",
          #   archiver: "7z a",
          #   cmake_generator: "Visual Studio 17 2022"
          # }
          - {
            name: "Ubuntu_Latest",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Debug",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            cmake_generator: "Ninja"
          }
          - {
            name: "MacOS_Latest",
            os: macos-latest,
            artifact: "macos_clang.7z",
            build_type: "Debug",
            cc: "clang",
            cxx: "clang++",
            archiver: "7za a",
            cmake_generator: "Ninja"
          }
        python_version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    name: ${{matrix.config.os}} - Python ${{matrix.python_version}}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python_version}}
          architecture: x64
          cache: 'pip'  # cache pip dependencies
          cache-dependency-path: |
            **/pyproject.toml

      - name: Print env
        run: |
          echo github.event.action: ${{github.event.action}}
          echo github.event_name: ${{github.event_name}}

      - name: Install dependencies on Windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install cmake doxygen ccache
          git clone https://github.com/Microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          vcpkg install cppzmq:x64-windows
          cmake --version

      - name: Install dependencies on Ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build \
            cmake gcovr doxygen ccache clang-tidy cppcheck
          ninja --version
          cmake --version
          gcc --version

      - name: Install dependencies on MacOS
        if: startsWith(matrix.config.os, 'MacOS')
        run: |
          brew install p7zip cmake ninja gcovr doxygen ccache
          ninja --version
          cmake --version
          clang --version

      - name: Install Python dependencies
        run: >-
          pip3 install
          cython
          wheel
          setuptools>=61.0.0
          setuptools_scm

      - name: Configure CMake
        run: >-
          cmake
          -G "${{matrix.config.cmake_generator}}"
          -DBUILD_TESTING=ON
          -DBUILD_PYTHON=ON
          -DBUILD_COVERAGE=ON
          -DBUILD_DOCUMENTATION=OFF
          -DBUILD_STATIC_ANALYSIS=OFF
          -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}}
          -S . -B ${{github.workspace}}/build

      - name: Build package
        run: >-
          cmake
          --build ${{github.workspace}}/build
          --config ${{matrix.config.build_type}} -j

      - name: CPP Test
        working-directory: ${{github.workspace}}/build
        run: |
          ls ${{github.workspace}}
          ctest -V -C ${{matrix.config.build_type}}

  # lint:
  #   name: Lint code
  #   runs-on: ${{matrix.config.os}}
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       config:
  #       - {
  #           name: "Ubuntu_Latest",
  #           os: ubuntu-latest,
  #         }
  #   needs: build
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Exclude directories
  #       working-directory: ${{github.workspace}}/tools
  #       run: |
  #         rm -rf ./cpp/KML/lib

  #     - name: Run Linter
  #       uses: github/super-linter@v4
  #       env:
  #         DEFAULT_BRANCH: main
  #         GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  dist:
    runs-on: ubuntu-latest
    needs: [build]

    name: Verify Built Packages
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - name: Install dependencies
        run: >-
          python -m pip install --upgrade
          pip
          wheel
          setuptools
          build
          twine
          pytest
          pytest-clarity
          pytest-cov
          pytest-xdist
          toml

      - name: Build package
        run: python -m build -o dist/
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

      - name: Pytest wheel
        working-directory: ${{github.workspace}}
        run: |
          pip3 install dist/*.whl --force-reinstall
          python3 -m pytest -v -p no:cacheprovider \
            -c ${{github.workspace}}/pyproject.toml -doctest -n auto \
            --cov-report term --cov-report html:./html_dir \
            --cov tools/python/tests tools/python/tests

      - name: Pytest sdist
        working-directory: ${{github.workspace}}
        run: |
          pip3 install dist/*.tar.gz --force-reinstall
          python3 -m pytest -v -p no:cacheprovider \
            -c ${{github.workspace}}/pyproject.toml -doctest -n auto \
            --cov-report term --cov-report xml \
            --cov tools/python/tests tools/python/tests

      - name: Upload Coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        if: ${{ env.CODECOV_TOKEN }}
        uses: codecov/codecov-action@master
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{github.workspace}}/coverage.xml
          name: KML Coverage

      - name: Check PyPI Format
        run: twine check --strict dist/*

  # dist_upload:
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
  #   needs: [dist_check]
  #   steps:
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: dist
  #       path: dist

  #   - name: Publish package to PyPI
  #     uses: pypa/gh-action-pypi-publish@master
  #     with:
  #       user: __token__
  #       password: ${{ secrets.pypi_token }}

name: CI

on:
  push:
  pull_request:
  release:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1

jobs:
  build:
    runs-on: ${{matrix.config.os}}
    strategy:
      fail-fast: true
      matrix:
        config:
        # - {
        #     name: "Windows Latest MSVC",
        #     os: windows-latest,
        #     artifact: "windows_msvc.7z",
        #     build_type: "Release",
        #     cc: "cl",
        #     cxx: "cl",
        #     environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
        #     archiver: "7z a",
        #     generators: "Visual Studio 16 2019"
        #   }
        # - {
        #     name: "Windows Latest MinGW",
        #     os: windows-latest,
        #     artifact: "windows_mingw.7z",
        #     build_type: "Release",
        #     cc: "gcc",
        #     cxx: "g++",
        #     archiver: "7z a",
        #     generators: "Ninja"
        #   }
        - {
            name: "Ubuntu_Latest",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Debug",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
        # - {
        #     name: "MacOS_Latest",
        #     os: macos-latest,
        #     artifact: "macos_clang.7z",
        #     build_type: "Debug",
        #     cc: "clang",
        #     cxx: "clang++",
        #     archiver: "7za a",
        #     generators: "Ninja"
        #   }
        python_version: ['3.7', '3.8', '3.9', '3.10', '3.11.0-alpha - 3.11.0']

    name: ${{matrix.config.os}} - Python ${{matrix.python_version}}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python_version}}
          architecture: x64

      - name: Print env
        run: |
          echo github.event.action: ${{github.event.action}}
          echo github.event_name: ${{github.event_name}}

      - name: Install dependencies on Windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake gcovr doxygen
          ninja --version
          cmake --version

      - name: Install dependencies on Ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake gcovr doxygen ccache clang-tidy cppcheck
          pip3 install cython wheel setuptools>=61.0.0 setuptools_scm \
            pytest pytest-clarity pytest-cov pytest-xdist toml
          ninja --version
          cmake --version
          gcc --version

      - name: Install dependencies on MacOS
        if: startsWith(matrix.config.os, 'MacOS')
        run: |
          brew install p7zip cmake ninja gcovr doxygen ccache
          ninja --version
          cmake --version
          clang --version

      - name: Configure CMake
        run: |
          cmake -S . -B ${{github.workspace}}/build \
            -DBUILD_TESTING=ON \
            -DBUILD_PYTHON=ON \
            -DBUILD_COVERAGE=ON \
            -DBUILD_DOCUMENTATION=OFF \
            -DBUILD_STATIC_ANALYSIS=OFF\
            -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}}

      - name: Build package
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.config.build_type}} -j

      - name: CPP Test
        working-directory: ${{github.workspace}}/build
        run: |
          ls ${{github.workspace}}
          ctest -V -C ${{matrix.config.build_type}}

      - name: Pytest wheel
        working-directory: ${{github.workspace}}/build/tools/
        run: |
          ls packages
          pip3 install packages/kml*.whl --force-reinstall
          python3 -m pytest -v -p no:cacheprovider -c ${{github.workspace}}/pyproject.toml -n auto --cov-report html:html_cov python/tests

      - name: Pytest sdist
        working-directory: ${{github.workspace}}/build/tools/
        run: |
          ls packages
          pip3 install packages/kml*.tar.gz --force-reinstall
          python3 -m pytest -v -p no:cacheprovider -c ${{github.workspace}}/pyproject.toml -n auto --cov-report html:html_cov python/tests

  # lint:
  #   name: Lint code
  #   runs-on: ${{matrix.config.os}}
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       config:
  #       - {
  #           name: "Ubuntu_Latest",
  #           os: ubuntu-latest,
  #         }
  #   needs: build
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Exclude directories
  #       working-directory: ${{github.workspace}}/tools
  #       run: |
  #         rm -rf ./cpp/KML/lib

  #     - name: Run Linter
  #       uses: github/super-linter@v4
  #       env:
  #         DEFAULT_BRANCH: main
  #         GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  dist:
    runs-on: ubuntu-latest
    needs: [build]

    name: Python sdist/wheel
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: "3.8"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade wheel setuptools build

    - name: Build package
      run: python -m build -o dist/
    - uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist

  dist_check:
    runs-on: ubuntu-latest
    needs: [dist]
    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: "3.8"

    - name: Install dependencies
      run: pip install twine
    - uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
    - run: twine check --strict dist/*

  # dist_upload:
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
  #   needs: [dist_check]
  #   steps:
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: dist
  #       path: dist

  #   - name: Publish package to PyPI
  #     uses: pypa/gh-action-pypi-publish@master
  #     with:
  #       user: __token__
  #       password: ${{ secrets.pypi_token }}

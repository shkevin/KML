:github_url: https://github.com/shkevin/KML


.. _program_listing_file_KML_include_data_structures_LinkedList.h:

Program Listing for File LinkedList.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_KML_include_data_structures_LinkedList.h>` (``KML/include/data_structures/LinkedList.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef __LINKED_LIST_H__
   #define __LINKED_LIST_H__
   
   #include <mutex>  // Lock
   
   #include "IDataStructure.h"
   #include "Node.h"
   
   namespace KML
   {
       namespace DataStructures
       {
           template<typename T = double>
           class LinkedList : public IDataStructure<T>
           {
               public:
                   explicit LinkedList(const size_t &windowSize);
   
                   virtual ~LinkedList();
   
                   LinkedList(const LinkedList &) = delete;  // No copy
   
                   LinkedList &operator=(const LinkedList &) = delete;  // No copy
   
                   LinkedList(LinkedList<T>&& other);
       
                   LinkedList<T>& operator=(LinkedList<T>&& rhs);
   
                   void update(const T &item) override;
   
                   using IDataStructure<T>::update;
   
                   T pop();
   
                   bool full() const override;
   
                   bool empty() const override;
   
                   size_t size() const override;
   
                   void reset() override;
   
                   void display() const;
   
               private:
                   std::mutex m_mutex;
   
                   Node<T> *m_head = nullptr;
   
                   Node<T> *m_tail = nullptr;
   
                   size_t m_size = 0;
           };
       }  // namespace DataStructures
   }  // namespace KML
   
   #include "LinkedList.tcc"
   
   #endif  // __LINKED_LIST_H__

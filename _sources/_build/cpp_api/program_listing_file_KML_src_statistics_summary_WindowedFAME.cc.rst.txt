:github_url: https://github.com/shkevin/KML


.. _program_listing_file_KML_src_statistics_summary_WindowedFAME.cc:

Program Listing for File WindowedFAME.cc
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_KML_src_statistics_summary_WindowedFAME.cc>` (``KML/src/statistics/summary/WindowedFAME.cc``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #include "WindowedFAME.h"
   
   #include <cmath>
   #include <iostream>
   
   namespace KML
   {
       namespace Statistics
       {
           WindowedFAME::WindowedFAME(const double& stepSize, const double& epsilon)
               : IStreamingStatistic(0), m_stepSize(stepSize), m_epsilon(epsilon)
           {
               // Ensure that the quantile range is appropriate.
               if ((m_epsilon < 0) || (m_epsilon >= 1))
               {
                   throw std::invalid_argument("Epsilon must be in half closed interval [0, 1)");
               }
           }
   
           void WindowedFAME::update(const double& observation)
           {
               if (m_historyCount == 0)
               {
                   m_median = observation;
                   m_stepSize = std::max(std::abs(observation) / 2.0, m_stepSize);
               }
   
               if (m_median > observation)
               {
                   m_median = m_median - m_stepSize;
               }
               else if (m_median < observation)
               {
                   m_median = m_median + m_stepSize;
               }
   
               if ((m_historyCount != 0) && (std::abs(observation - m_median) < m_stepSize))
               {
                   m_stepSize = m_stepSize / 2.0;
               }
   
               // Change suggested for "windowing flavor".
               m_stepSize = m_stepSize * (1 + m_epsilon);
               m_historyCount += 1;
           }
   
           double WindowedFAME::evaluate() const { return m_median; }
       }  // namespace Statistics
   }  // namespace KML

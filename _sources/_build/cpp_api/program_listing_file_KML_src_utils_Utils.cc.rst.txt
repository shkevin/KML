:github_url: https://github.com/shkevin/KML


.. _program_listing_file_KML_src_utils_Utils.cc:

Program Listing for File Utils.cc
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_KML_src_utils_Utils.cc>` (``KML/src/utils/Utils.cc``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #include "Utils.h"
   
   #include <cmath>  // fabs
   #include <stdexcept>
   
   #include <iostream>
   
   namespace KML
   {
       namespace Utils
       {
   
           bool approximatelyEqual(const double& a, const double& b, const double& epsilon)
           {
               return std::fabs(a - b) <=
                      ((std::fabs(a) < std::fabs(b) ? std::fabs(b) : std::fabs(a)) * epsilon);
           }
   
           bool essentiallyEqual(const double& a, const double& b, const double& epsilon)
           {
               return std::fabs(a - b) <=
                      ((std::fabs(a) > std::fabs(b) ? std::fabs(b) : std::fabs(a)) * epsilon);
           }
   
           bool definitelyGreaterThan(const double& a, const double& b, const double& epsilon)
           {
               return (a - b) > ((fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
           }
   
           bool definitelyLessThan(const double& a, const double& b, const double& epsilon)
           {
               return (b - a) > ((fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
           }
   
           double xlogx(const double& item)
           {
               if (item < 0)
               {
                   std::cout << item << std::endl;
                   throw std::runtime_error("Input item must be >= 0!");
               }
               if (0 == item)
               {
                   return 0.0;
               }
   
               return item * std::log2(item);
           }
   
       }  // namespace Utils
   }  // namespace KML
   

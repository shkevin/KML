[tox]
envlist = test,typechecks,lint,readme
skipdist = True

[testenv]
allowlist_externals = echo
commands = echo "success"
isolated_build = True
skip_install = True
install_command = pip install {opts} {packages}
deps =
setenv =
    PYTHONPATH = {env:PYTHONPATH}{:}{toxinidir}
platform =
    linux: linux
    macos: darwin
    windows: win64
basepython = python3.8
paths_to_check =
    ./tools/python/kml
    ./tools/cython/kml

[testenv:readme]
description = check that the long description is valid.
envdir = {toxworkdir}/readme
skip_install = true
deps =
    twine>=3.7.1
    wheel
    setuptools>=61.0.0

extras =
commands =
    pip wheel -w {envdir}/build .
    twine check {envdir}/build/*

[testenv:test]
description = Run pytest and generate coverage.
sitepackages = true
envdir = {toxworkdir}/test
setenv =
    setupdir = {toxinidir}
passenv =
    PYTHONPATH
allowlist_externals = true
whitelist_externals =
    /bin/bash
usedevelop = true
deps =
    pytest
    pytest-xdist    # Parallel runs
    pytest-clarity  # Readability
    pytest-cov      # Coverage
    pytest-randomly # Run tests in random order

commands =
    ; /bin/bash -ec 'if [[ -z "$(pip show kml 2>&1 /dev/null | grep Version)" ]]; then pip install {toxinidir}; fi'
    pip install .
    python3 -m pytest -v -c pyproject.toml -doctest -n auto --cov-report term --cov-report=html:{toxworkdir}/html_dir --cov=tools {posargs: {toxinidir}/tools/python/tests}
    ; python3 -m pytest -v -c pyproject.toml -n auto --cov-report html:{toxworkdir}/html_dir {posargs: {toxinidir}/tools/python/tests}

[testenv:typechecks]
description = Run mypy type checks on Python sources.
envdir = {toxworkdir}/typechecks

deps =
    mypy

commands = {posargs:mypy} --exclude "tools/cython/kml/__init__.py" --config-file pyproject.toml {[testenv]paths_to_check}

[testenv:lint]
description = Run linting on all python/cython sources.
ignore_errors = true
envdir = {toxworkdir}/lint

deps =
    isort
    flake8
    flake8-bugbear
    flake8-builtins
    flake8-comprehensions
    flake8-string-format
    flake8-docstrings
    flake8-bandit
    black[jupyter]
    pydocstyle
    pylint
    toml

commands =
    flake8 --statistics {posargs:{[testenv]paths_to_check}}
    isort --check-only --diff {posargs:{[testenv]paths_to_check}}
    black --config pyproject.toml --check --diff --color --extend-exclude "_version.py" {posargs:{[testenv]paths_to_check}}
    pydocstyle {posargs:{[testenv]paths_to_check}}
    pylint --rcfile pyproject.toml --ignore "_version.py" {posargs:{[testenv]paths_to_check}}

[flake8]
filename = *.py, *.pyx, *.pxd
per-file-ignores =
    *__init__.py:F401
extend-ignore = E999
max-line-length = 100

[coverage:paths]
source =
    tools/python/kml
    */site-packages/kml

[coverage:run]
branch = true
parallel = true
omit =
    build/*
    tools/cython/kml/_version.py

[coverage:report]
precision = 2
omit =
    build/*
    tools/cython/kml/_version.py
